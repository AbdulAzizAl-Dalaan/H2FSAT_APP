<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" href="/images/ARNG.png" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous" />
  <title>Create Assessment</title>
  <style>
    .form-group {
      margin: 10px;
    }

    .content {
      max-width: 1000px;
      margin: auto;
      margin-top: 20px;
    }

    .question-title-space {
      margin-top: 75px;
    }

    .textbox-space {
      margin-top: 20px;
    }

    .button-right {
      float: right;
    }

    .button-space {
      margin-top: 20px;
    }

    body {
      padding-bottom: 20px;
    }
  </style>
  <link rel="stylesheet" href="/stylesheets/style.css" />
</head>

<body>
  <%- include('header') %> <%- include("appmsg") %>

      <div class="content">
        <div class="row mb-3" style="padding-top: 10px">
          <div class="col-12 text-center">
            <h1 style="text-decoration: underline">Assessment Information</h1>
          </div>
        </div>

        <form method="post" action="/create">
          <div class="form-group">
            <label for="title">Title:</label>
            <input type="text" class="form-control" id="title" name="title" required />
          </div>
          <div class="form-group">
            <label for="description">Description:</label>
            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
          </div>
          <!-- <div class="form-group">
            <label for="show_question_numbers">Show Question Numbers:</label>
            <input type="checkbox" class="form-check-input" id="show_question_numbers" name="show_question_numbers" />
          </div>
          <div class="form-group">
            <label for="grade_by_points">Grade by Points:</label>
            <input type="checkbox" class="form-check-input" id="grade_by_points" name="grade_by_points" />
          </div> -->
          <div class="form-group">
            <label for="secure">Require Password:</label>
            <input type="checkbox" class="form-check-input" id="secure" name="secure"
              onchange="togglePasswordInput()" />
            <div class="form-group">
              <label for="password">Password:</label>
              <input type="password" class="form-control" id="password" name="password" disabled />
            </div>
          </div>

          <div id="questions">
            <!-- Question fields will be dynamically generated here -->
          </div>

          <div class="form-group button-space">
            <button type="button" class="btn btn-primary" onclick="addQuestion()">
              Add Question
            </button>
          </div>

          <input type="hidden" id="num_questions" name="num_questions" value="0" />

          <div class="form-group row mb-3" style="padding-top: 10px">
            <div class="col-12 text-center">
              <button type="submit" class="btn btn-success">Create Assessment</button>
            </div>
          </div>
        </form>
      </div>

      <script>
        let questionCount = 0;

        function togglePasswordInput() { // handles the password input field
          var passwordInput = document.getElementById("password");
          var secureCheckbox = document.getElementById("secure");
          passwordInput.disabled = !secureCheckbox.checked;
        }

        function addQuestion() { // handles the question input fields
          questionCount++;

          // creates the 
          const questionTypeSelect = document.createElement("select");
          questionTypeSelect.classList.add("form-control", "textbox-space");
          questionTypeSelect.setAttribute(
            "name",
            `question_${questionCount}_type`
          );
          questionTypeSelect.setAttribute(
            "onchange",
            `toggleQuestionFields(${questionCount})`
          );

          const checkboxOption = document.createElement("option");
          checkboxOption.setAttribute("value", "checkbox");
          checkboxOption.textContent = "Checkbox";
          questionTypeSelect.appendChild(checkboxOption);

          const multipleChoiceOption = document.createElement("option");
          multipleChoiceOption.setAttribute("value", "multiple_choice");
          multipleChoiceOption.textContent = "Multiple Choice";
          questionTypeSelect.appendChild(multipleChoiceOption);

          const textOption = document.createElement("option");
          textOption.setAttribute("value", "text");
          textOption.textContent = "Text";
          questionTypeSelect.appendChild(textOption);

          const numberRangeOption = document.createElement("option");
          numberRangeOption.setAttribute("value", "number_range");
          numberRangeOption.textContent = "Number Range";
          questionTypeSelect.appendChild(numberRangeOption);

          const questionTypeFormGroup = document.createElement("div");
          questionTypeFormGroup.classList.add("form-group");

          const questionFieldsDiv = document.createElement("div");
          questionFieldsDiv.setAttribute(
            "id",
            `question_${questionCount}_fields`
          );

          const questionTitle = document.createElement("input");
          questionTitle.setAttribute("type", "text");
          questionTitle.classList.add("form-control", "question-title-space");
          questionTitle.setAttribute(
            "name",
            `question_${questionCount}_title`
          );
          questionTitle.setAttribute(
            "placeholder",
            `Question ${questionCount} Title`
          );
          questionTitle.required = true
          questionTypeFormGroup.appendChild(questionTitle)

          const deleteButton = document.createElement("button");
          deleteButton.setAttribute("type", "button");
          deleteButton.classList.add("btn", "btn-danger", "ml-2", "button-space");
          deleteButton.textContent = "Delete Question";
          deleteButton.addEventListener("click", function () {
            questionTypeFormGroup.remove();
            questionFieldsDiv.remove();
            questionCount--; // decrease the question count when a question is removed
            updateQuestionNumbers();
          });

          const questionsDiv = document.getElementById("questions");
          questionTypeFormGroup.append(questionTypeSelect, deleteButton)
          questionsDiv.appendChild(questionTypeFormGroup);
          questionsDiv.appendChild(questionFieldsDiv);

          toggleQuestionFields(questionCount);
          document.getElementById('num_questions').value = questionCount;
        }

        function toggleQuestionFields(questionNumber) {
          const questionTypeSelect = document.querySelector(
            `[name="question_${questionNumber}_type"]`
          );
          const questionType = questionTypeSelect.value;

          const questionFieldsDiv = document.getElementById(
            `question_${questionNumber}_fields`
          );
          questionFieldsDiv.innerHTML = "";

          if (questionType === "checkbox" || questionType == "multiple_choice") {

            const selectOptionsFormGroup = document.createElement("div");
            selectOptionsFormGroup.classList.add("form-group");

            const checkboxOptionsLabel = document.createElement("label");
            checkboxOptionsLabel.setAttribute("for", `question_${questionNumber}_options`);
            checkboxOptionsLabel.textContent = questionType === "checkbox" ? "Checkbox Options:" : "Multiple Choice Options:";

            const defaultOption1 = document.createElement("input");
            defaultOption1.setAttribute("type", "text");
            defaultOption1.classList.add("form-control", "textbox-space");
            defaultOption1.setAttribute("name", `question_${questionNumber}_option_1`);
            defaultOption1.setAttribute("id", `question_${questionNumber}_option_1`);
            defaultOption1.setAttribute("placeholder", "Option 1")
            defaultOption1.required = true

            const defaultOption2 = document.createElement("input");
            defaultOption2.setAttribute("type", "text");
            defaultOption2.classList.add("form-control", "textbox-space");
            defaultOption2.setAttribute("name", `question_${questionNumber}_option_2`);
            defaultOption2.setAttribute("id", `question_${questionNumber}_option_2`);
            defaultOption2.setAttribute("placeholder", "Option 2")

            let optionIndex = 2; // Track the highest index ever used for options

            const addOptionButton = document.createElement("button");
            addOptionButton.setAttribute("type", "button");
            addOptionButton.classList.add("btn", "btn-primary", "button-space");
            addOptionButton.textContent = "Add Option";
            addOptionButton.addEventListener("click", () => {
              optionIndex++;  // Increment the index
              const newOptionInput = document.createElement("input");
              newOptionInput.setAttribute("type", "text");
              newOptionInput.classList.add("form-control", "textbox-space");
              newOptionInput.setAttribute("name", `question_${questionNumber}_option_${optionIndex}`);
              newOptionInput.setAttribute("id", `question_${questionNumber}_option_${optionIndex}`);
              newOptionInput.setAttribute("placeholder", `Option ${optionIndex}`)
              selectOptionsFormGroup.insertBefore(newOptionInput, addOptionButton);
            });

            const removeOptionButton = document.createElement("button");
            removeOptionButton.setAttribute("type", "button");
            removeOptionButton.classList.add("btn", "btn-danger", "button-right", "button-space");
            removeOptionButton.textContent = "Remove Option";
            removeOptionButton.addEventListener("click", () => {
              if (optionIndex > 2) {  // Ensure first 2 options are not removable
                // Find the last input in the selectOptionsFormGroup
                let lastOptionInput = null;
                for (let i = selectOptionsFormGroup.children.length - 1; i >= 0; i--) {
                  if (selectOptionsFormGroup.children[i].tagName.toLowerCase() === 'input' &&
                    selectOptionsFormGroup.children[i].type === 'text') {
                    lastOptionInput = selectOptionsFormGroup.children[i];
                    break;
                  }
                }
                if (lastOptionInput) {
                  selectOptionsFormGroup.removeChild(lastOptionInput);
                }
                optionIndex--;  // Decrement the index
              }
            });

            selectOptionsFormGroup.appendChild(checkboxOptionsLabel);
            selectOptionsFormGroup.appendChild(defaultOption1);
            selectOptionsFormGroup.appendChild(defaultOption2);
            selectOptionsFormGroup.appendChild(addOptionButton);
            selectOptionsFormGroup.appendChild(removeOptionButton);

            questionFieldsDiv.appendChild(selectOptionsFormGroup);

          } else if (questionType === "number_range") {
            const numberRangeQuestionFormGroup = document.createElement("div");
            numberRangeQuestionFormGroup.classList.add("form-group");

            const numberRangeQuestionLabel = document.createElement("label");
            numberRangeQuestionLabel.setAttribute(
              "for",
              `question_${questionNumber}_number_range_question`
            );
            numberRangeQuestionLabel.textContent = "Number Range Question:";

            const numberRangeTopInput = document.createElement("input");
            numberRangeTopInput.setAttribute("type", "number");
            numberRangeTopInput.classList.add("form-control", "textbox-space");
            numberRangeTopInput.setAttribute(
              "name",
              `question_${questionNumber}_number_range_top`
            );
            numberRangeTopInput.setAttribute(
              "id",
              `question_${questionNumber}_number_range_top`
            );
            numberRangeTopInput.setAttribute("placeholder", "Top Range Number");
            numberRangeTopInput.required = true

            const numberRangeBottomInput = document.createElement("input");
            numberRangeBottomInput.setAttribute("type", "number");
            numberRangeBottomInput.classList.add("form-control", "textbox-space");
            numberRangeBottomInput.setAttribute(
              "name",
              `question_${questionNumber}_number_range_bottom`
            );
            numberRangeBottomInput.setAttribute(
              "id",
              `question_${questionNumber}_number_range_bottom`
            );
            numberRangeBottomInput.setAttribute("placeholder", "Bottom Range Number");
            numberRangeBottomInput.required = true

            numberRangeTopInput.addEventListener("input", function () {
              validateNumberRange(numberRangeTopInput, numberRangeBottomInput, questionNumber);
            });

            numberRangeBottomInput.addEventListener("input", function () {
              validateNumberRange(numberRangeTopInput, numberRangeBottomInput, questionNumber);
            });

            numberRangeQuestionFormGroup.appendChild(numberRangeQuestionLabel);
            numberRangeQuestionFormGroup.appendChild(numberRangeTopInput);
            numberRangeQuestionFormGroup.appendChild(numberRangeBottomInput);


            questionFieldsDiv.appendChild(numberRangeQuestionFormGroup);
          }
        }

        // WILL BE UPDATED LATER FOR STORING PRESENT VALUES FOR CHECKBOX, MULTIPLE CHOICE, AND NUMBER RANGE QUESTIONS
        function updateQuestionNumbers() {
          const questionsDiv = document.getElementById('questions');
          const questionDivs = questionsDiv.children;
          let newQuestionCount = 0; // initialize new question number

          // for loop to loop for the question {questionCount} fields
          for (let i = 0; i < questionDivs.length; i += 2) {
            const questionTypeFormGroup = questionDivs[i];
            const questionFieldsDiv = questionDivs[i + 1];

            // New index for the question
            newQuestionCount++;

            // Updating question title placeholder and name attribute
            const questionTitle = questionTypeFormGroup.querySelector('input[type="text"]');
            questionTitle.placeholder = `Question ${newQuestionCount} Title`;
            questionTitle.name = `question_${newQuestionCount}_title`;

            // Updating select name attribute
            const questionTypeSelect = questionTypeFormGroup.querySelector('select');
            questionTypeSelect.name = `question_${newQuestionCount}_type`;
            questionTypeSelect.setAttribute(
              "onchange",
              `toggleQuestionFields(${newQuestionCount})`
            );

            // Updating div id
            questionFieldsDiv.id = `question_${newQuestionCount}_fields`;

            // Update other fields within questionFieldsDiv by using regex among all similiar divs
            [...questionFieldsDiv.querySelectorAll('input, select, textarea')].forEach(inputElem => {
              inputElem.name = inputElem.name.replace(/\d+/g, newQuestionCount);
            });

            toggleQuestionFields(newQuestionCount);
          }

          document.getElementById('num_questions').value = newQuestionCount;
          questionCount = newQuestionCount; // Update global questionCount
        }

        function validateNumberRange(topInput, bottomInput, questionNumber) {
          const topValue = parseFloat(topInput.value);
          const bottomValue = parseFloat(bottomInput.value);

          if (!isNaN(topValue) && !isNaN(bottomValue) && topValue <= bottomValue) {
            alert(`Top range must be greater than bottom range for Question ${questionNumber}`);
            topInput.value = "";
            bottomInput.value = "";
          }
        }

      </script>
</body>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>

</html>
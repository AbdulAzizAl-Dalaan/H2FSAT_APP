<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/ARNG.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <link href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css" rel="stylesheet">
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <title>Unit Summary</title>
    <style>
      .form-group {
        margin:10px;
      }

      .content {
        max-width: 1200px;
        margin: auto;
      }

      /* Add style for tooltip */
      .d3-tooltip {
        position: absolute;
        background-color: #ffffff;
        border: 1px solid #ccc;
        padding: 10px;
        z-index: 1000;
        pointer-events: none; 
        display: none;
        border-radius: 5px; /* Rounded corners */
        box-shadow: 0px 0px 10px rgba(0,0,0,0.1); /* Subtle shadow for depth */
        font-size: 0.9em; /* Adjust font size if needed */
      }


      /* Table styling */
      #d3-table {
        font-family: Arial, sans-serif;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s; /* Smooth transition for shadow and transform */
      }

      #d3-table thead th:hover {
        cursor: pointer;  /* Changes the mouse cursor to a hand, indicating clickability */
        background-color: #f0f0f0;  /* A subtle shade to indicate hover */
      }


      #d3-table thead {
        background-color: #f5f5f5;
      }

      #d3-table tbody tr {
        transition: background-color 0.3s;
      }

      #d3-table tbody tr:hover {
        background-color: #e9ecef;
      }
    </style>
</head>
<body>
<%- include('header') %>
<div class="content">
    <div class="row mb-3" style="padding-top: 10px">
        <div class="col-12 text-center">
          <h1 style="text-decoration: underline;"><%= survey.title %> Results Page</h1>
        </div>
    </div>


    <select id="questionSelector">
      <!-- Options will be populated dynamically -->
    </select>
    <div id="d3-visualization">
      <div id="bar-chart" style="float: left; width: 50%; padding-right: 0px; margin-left: -200px;">   
        <h2 class="text-center">Questions</h2>
      </div>
      <div id="pie-chart" style="float: left; width: 50%; margin-left: 200px;">
          <h2 class="text-center">Top Answer</h2>
      </div>
      <div id="detail-chart"></div>
    
      <div style="clear:both;"></div>
      <div id="d3-table" style="margin-top: 200px;">
        <h2 class="text-center">Survey Table</h2>
          <button id="resetTable">Show All Questions</button>
        <table class="table table-hover">
            <!-- Rest of the table code -->
        </table>
      </div>
    
    </div>
  


    <% if (survey_results.length === 0) { %>
        <div class="row mb-3" style="padding-top: 10px">
            <div class="col-12 text-center">
                <h3> There are no submit results for the <%= survey.title %> assessment</h3>
            </div>
        </div>
    <% } %>
</div>

<!-- Extracting and Processing the Data for Visualization -->
<script>

  // Extract question #3 responses
  const raw_data = <%- JSON.stringify(survey_results) %>;
  const allResponses = {};

  raw_data.forEach(entry => {
    for (const question in entry.results) {
        if (!allResponses[question]) {
            allResponses[question] = {};
        }
        const response = entry.results[question];
        allResponses[question][response] = (allResponses[question][response] || 0) + 1;
    }
  });

// Setting up a tooltip for detailed info
  const tooltip = d3.select("body")
    .append("div")
    .attr("class", "d3-tooltip")
    .style("opacity", 0.8)
    .style("display", "none");

// Dimensions and margins for the bar chart
  const width = 1000;
  const height = 400;
  const margin = { top: 50, right: 30, bottom: 50, left: 70 };

  // Bar Chart drawing function
  function drawBarChart(questionKey) {
    // Data based on selected question
    const data = Object.entries(allResponses[questionKey]).map(([answer, count]) => {
        // Extracting emails associated with the answers
        const emails = raw_data.filter(d => d.results[questionKey] === answer).map(d => d.email);
        return {
            answer,
            count,
            emails: emails
        };
    });

    // Clear previous SVG if it exists
    d3.select("#bar-chart svg").remove();

    // Define SVG container
    const svg = d3.select("#bar-chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // Define scales
    const x = d3.scaleBand()
        .domain(data.map(d => d.answer))
        .range([0, width])
        .padding(0.1);
    const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.count)])
        .range([height, 0]);


    // X Axis
    svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x));

    // X Axis Label
    svg.append("text")
        .attr("transform", `translate(${width / 2}, ${height + margin.bottom - 10})`)
        .style("text-anchor", "middle")
        .text("Answers");

    // Y Axis
    svg.append("g")
        .call(d3.axisLeft(y));

    // Y Axis Label
    svg.append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 0 - margin.left + 20)
        .attr("x", 0 - (height / 2))
        .attr("dy", "1em")
        .style("text-anchor", "middle")
        .text("Number of Soldiers");

    const colorScale = d3.scaleSequential(d3.interpolateBlues)
        .domain([0, d3.max(data, d => d.count)]);

        
// Draw bars
const bars = svg.selectAll("rect")
    .data(data)
    .enter()
    .append("rect")
    .attr("x", d => x(d.answer))
    .attr("y", height) // start at the base
    .attr("width", x.bandwidth())
    .attr("height", 0) // initial height is 0
    .attr("fill", d => colorScale(d.count))
    .on("mouseover", function(event, i) {
        d3.select(this).attr("fill", "darkblue");
        const d = data[i];
        const emailsList = d.emails && d.emails.length ? d.emails.join(', ') : 'No users';
        tooltip
            .style("left", (d3.event.pageX + 10) + "px")
            .style("top", (d3.event.pageY +10) + "px")
            .html(`Answer: ${d.answer}<br>Users: ${emailsList}`)
            .style("display", "block");
    })
    .on("mouseout", function() {
        d3.select(this).attr("fill", d => colorScale(d.count));
        tooltip.style("display", "none");
    });

// Animation from bottom to up
bars.transition()
    .duration(800)
    .attr("y", d => y(d.count))
    .attr("height", d => height - y(d.count))
    .delay((d, i) => i * 50);


}

// Dropdown for question selection
const select = d3.select("#questionSelector")
  .on("change", function() { drawBarChart(this.value); });

select.selectAll("option")
  .data(Object.keys(allResponses))
  .enter()
  .append("option")
  .attr("value", d => d)
  .text(d => "Question " + d);

// Initialize with the first question
drawBarChart(Object.keys(allResponses)[0]);

//////////////////////////////////////////////////////////////////////////////////////////////
//end of the question 3






  ////////////////////////////////////////////////////////////////////////////////////////////
  /*This is for question 1, with pie chart*/
  // Grouping data for pie chart
// Grouping data for question #1 and pie chart

const totalWidth = 1600;
const piewidth = totalWidth / 2;

const aggregateResponses = {};
const pieEmailGroup = {};

raw_data.forEach(entry => {
  for (const question in entry.results) {
    const response = entry.results[question];
    const email = entry.email;
    
    if (!aggregateResponses[question]) {
      aggregateResponses[question] = {};
    }

    if (aggregateResponses[question][response]) {
      aggregateResponses[question][response]++;
    } else {
      aggregateResponses[question][response] = 1;
    }

    if (!pieEmailGroup[response]) {
      pieEmailGroup[response] = [];
    }
    pieEmailGroup[response].push(email);
  }
});

// Find the most common answer for each question
const mostCommonResponses = [];
for (const question in aggregateResponses) {
  let maxCount = 0;
  let mostCommonAnswer = null;
  for (const answer in aggregateResponses[question]) {
    if (aggregateResponses[question][answer] > maxCount) {
      maxCount = aggregateResponses[question][answer];
      mostCommonAnswer = answer;
    }
  }
  mostCommonResponses.push({answer: mostCommonAnswer, count: maxCount, emails: pieEmailGroup[mostCommonAnswer] || []});
}

const totalResponses = mostCommonResponses.reduce((sum, entry) => sum + entry.count, 0);


// Drawing the pie chart
const pieSvg = d3.select("#pie-chart").append("svg")
    .attr("width", piewidth)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

const pie = d3.pie().value(d => d.count)(mostCommonResponses);
const arc = d3.arc().innerRadius(0).outerRadius(Math.min(width, height) / 2 - 40);


pieSvg.selectAll("path")
    .data(pie)
    .enter().append("path")
    .attr("d", arc)
    .attr("fill", (d, i) => d3.schemeCategory10[i])
    .attr("data-index", (d, i) => i)   // Assign index as a custom attribute
    .on("mouseover", function(event, d) {
    d3.select(this)
      .attr("opacity", 0.7)
      .transition()
      .duration(200)
      .attr("d", d3.arc().innerRadius(0).outerRadius(Math.min(width, height) / 2 - 30)); // Increased outer radius
      const dataIndex = this.getAttribute("data-index");
      const currentData = mostCommonResponses[dataIndex];
      const percentage = ((currentData.count / totalResponses) * 100).toFixed(2);
      
      tooltip
        .style("left", (d3.event.pageX + 10) + "px")
        .style("top", (d3.event.pageY +10) + "px")
        .html(`Question: ${dataIndex + 1}<br>Top Answer: ${currentData.answer} (${percentage}%)`)
        .style("display", "block");
    })


    .on("mouseout", function(d) {
      d3.select(this)
      .attr("opacity", 1)
      .transition()
      .duration(200)
      .attr("d", arc);
      tooltip.style("display", "none");
    });

    
//////////////////////////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////////////////////////////////
//Start of table
function resetTable() {
    d3.selectAll("#d3-table tbody tr td").style("display", "table-cell");
    d3.selectAll("#d3-table thead th").style("display", "table-cell");
}

const tableDiv = d3.select("#d3-table");

// Create table
const table = tableDiv.append("table")
    .attr("class", "table table-bordered"); // Using Bootstrap classes for styling

$(function () {
    $('[data-toggle="tooltip"]').tooltip()
})
let questionKeys = Object.keys(raw_data[0].results);
// Create table header
const thead = table.append("thead");
const headerData = ["Email"].concat(questionKeys.map(key => "Question " + key));

thead.append("tr")
    .selectAll("th")
    .data(headerData)
    .enter()
    .append("th")
    .text(d => d)
    .attr("data-toggle", "tooltip")  // Enable Bootstrap tooltips
    .attr("title", "Click to view responses");  // Tooltip content


// Create table body
const tbody = table.append("tbody");

// Add rows based on data
raw_data.forEach(entry => {
    const row = tbody.append("tr");
    row.append("td").text(entry.email);
    questionKeys.forEach(key => {
        let cellData = entry.results[key];
        if (Array.isArray(cellData)) {
            cellData = cellData.join(", ");
        }
        row.append("td").text(cellData);
    });
});


//$('#d3-table table').DataTable();


d3.selectAll("#d3-table thead th").on("click", function(d, i) {
    if (i === 0) {  // If the "Email" column is clicked
        resetTable();
        return;
    }
    
    // Hide all columns initially
    d3.selectAll("#d3-table tbody tr td").style("display", "none");
    d3.selectAll("#d3-table thead th").style("display", "none");
    
    // Display only the 'Email' column and the clicked column
    d3.selectAll(`#d3-table tbody tr td:nth-child(1)`).style("display", "table-cell");  // Email
    d3.selectAll(`#d3-table tbody tr td:nth-child(${i + 1})`).style("display", "table-cell");  // Clicked Column
    
    d3.select(`#d3-table thead th:nth-child(1)`).style("display", "table-cell");  // Email Header
    d3.select(`#d3-table thead th:nth-child(${i + 1})`).style("display", "table-cell");  // Clicked Column Header
});


document.getElementById("resetTable").addEventListener("click", resetTable);


</script>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/ARNG.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <link href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css" rel="stylesheet">
    
    
    <script>
      $(document).ready(function() {

          $('#myTable').DataTable();
      });
      </script>

    <script src="https://d3js.org/d3.v5.min.js"></script>


    <title>Unit Summary</title>

    

    <style>
      .form-group {
        margin:10px;
      }

      .content {
        max-width: 1200px;
        margin: auto;
      }

      .button-container #export-btn {
        padding: 12px 25px;
        border: none;
        background-color: #4CAF50;
        color: white;
        cursor: pointer;
        border-radius: 5px;
        transition: all 0.3s ease;
        font-size: 16px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 10px;
        outline: none;
      }

      .button-container #export-btn:hover {
        background-color: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
      }

      .button-container #export-btn:active {
        transform: translateY(1px);
        box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
      }


      .button-container {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
      }


      #questionSelector {
        width: 100%;
        max-width: 400px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    
      #questionSelector option {
        white-space: normal;
      }

      #bar-chart {
        display: block;
        margin-left: auto;
        margin-right: auto;
        width: fit-content;
        margin-top: 100px;
        margin-bottom: 250px;
        transform: translateX(-100px);
      }


      #bar-chart h2 {
        margin-top: 0;
      }

      .d3-tooltip {
        position: absolute;
        background-color: #ffffff;
        border: 1px solid #ccc;
        padding: 10px;
        z-index: 1000;
        pointer-events: none; 
        display: none;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0,0,0,0.1);
        font-size: 0.9em;
      }

      .chart-controls {
        text-align: left;
        padding-left: 10px;
        margin-bottom: 20px;
      }

      #line-chart {
        width: calc(100% - 20px);
        margin-top: -20px;
        display: block;
      }

      #line-chart svg {
        max-width: 100%;
      }

      #line-chart h2 {
        position: relative;
        top: -10px;
        bottom: 20px;
        text-align: center;
      }

      .linetooltip {
        opacity: 0;
        text-align: center;
        padding: 8px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0;
        border-radius: 8px;
        pointer-events: none;
        transition: opacity 0.3s;
      }


      .chart-button {
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 12px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 10px 5px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      .chart-button:hover {
        background-color: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      }

      .chart-button:active {
        transform: translateY(1px);
        box-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);
      }

      .date-input {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        margin-left: -10px;
  
      }

      .date-label {
        min-width: 90px;
        margin-right: 0px;
        display: inline-block;
      }

      
      #d3-table {
        width: 100%;
        overflow-x: auto;
        font-family: Arial, sans-serif;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s;
        margin-top: 200px;
        margin-bottom: 50px;
      }

      #d3-table thead th:hover {
        cursor: pointer;
        background-color: #f0f0f0;
      }

      #d3-table thead th {
        position: sticky;
        top: 0;
        background-color: #f5f5f5;
        z-index: 10;
        box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.4);
      }

      #d3-table thead {
        background-color: #f5f5f5;
      }

      #d3-table tbody tr {
        transition: background-color 0.3s;
      }

      #d3-table tbody tr:hover {
        background-color: #e9ecef;
      }



      
    </style>
</head>
<body>
<%- include('header') %>
<div class="content">
    <div class="row mb-3" style="padding-top: 10px">
        <div class="col-12 text-center">
          <h1 style="text-decoration: underline;"><%= survey.title %> Results Page</h1>
        </div>
    </div>


    
    <div id="d3-visualization">
      <div id="bar-chart">
        <h2 class="text-center"><%= survey.title %> Answers</h2>
          <select id="versionSelector">
            <!-- Options will be dynamically populated here -->
          </select>
          <select id="questionSelector">
            <!-- Questions will be populated based on the selected version -->
          </select>
      </div>
      
      <div id="linetooltip" class="linetooltip" style="opacity: 0;"></div> 
      <div id="line-chart">
        <div class="chart-controls">
          <div class="date-inputs">
            <label for="start-date" class="date-label">Start Date:</label>
            <input type="date" id="start-date" name="start-date" class="date-input">
      
            <label for="end-date" class="date-label">End Date:</label>
            <input type="date" id="end-date" name="end-date" class="date-input">
          </div>
      
          <div class="chart-buttons">
            <button id="filter-btn" class="chart-button">Apply Date Filter</button>
            <button id="reset-btn" class="chart-button">Reset Chart</button>
          </div>
        </div>
      
        <h2 class="text-center"><%= survey.title %> Participation Over Time</h2>
      </div>
      
        
      
      <div id="d3-table" style="margin-top: 200px;">
        <div class="table-top-bar">
          <select id="version-selector">
            <option value="latest">Latest Version</option>
            <!-- Dynamically populate with other versions -->
          </select>
          
          <h2 class="text-center"><%= survey.title %> Table</h2>
        </div>
        <div class="button-container">
          <button id="export-btn" class="button-common-style">Export to CSV</button>
        </div>
        <table class="table table-hover" id="myTable"></table>
      </div>
      
    
    
  </div>


    <% if (survey_results.length === 0) { %>
        <div class="row mb-3" style="padding-top: 10px">
            <div class="col-12 text-center">
                <h3> There are no submit results for the <%= survey.title %> assessment</h3>
            </div>
        </div>
    <% } %>
</div>

<script>

  const raw_data = <%- JSON.stringify(survey_results) %>;
  const core_data = <%- JSON.stringify(core_results) %>;
  const user_data = <%- JSON.stringify(user_results) %>;
  const question_data = <%- JSON.stringify(survey_questions) %>;
  const version_data = <%- JSON.stringify(version_results) %>;
  let surveyID = (raw_data[0] && raw_data[0].survey_id) ? raw_data[0].survey_id : null;

  console.log("version_data", version_data);
  console.log("raw_data", raw_data);
  console.log("user_results", user_data);
  console.log("question_data", question_data);

  const allResponses = {};
  
  raw_data.forEach(entry => {
    for (const question in entry.results) {
        if (!allResponses[question]) {
            allResponses[question] = {};
        }
        const response = entry.results[question];
        allResponses[question][response] = (allResponses[question][response] || 0) + 1;
    }
  });

  const tooltip = d3.select("body")
    .append("div")
    .attr("class", "d3-tooltip")
    .style("opacity", 0.8)
    .style("display", "none");

  const width = 1200;
  const height = 650;
  const margin = { top: 50, right: 30, bottom: 140, left: 70 };

  function drawBarChart(questionId, selectedVersion) {
  // Find all the responses for the selected question and version
  const filteredData = raw_data
    .filter(d => d.version.toString() === selectedVersion && d.results.hasOwnProperty(questionId));

  const responseCounts = {};
  filteredData.forEach(d => {
    const answer = d.results[questionId];
    responseCounts[answer] = (responseCounts[answer] || 0) + 1;
  });

  // Now map this to your bar chart data format...
  const data = Object.keys(responseCounts).map(answer => {
    return {
      answer: answer,
      count: responseCounts[answer],
      emails: filteredData.filter(d => d.results[questionId] === answer).map(d => d.email)
    };
  });

  // Continue with your existing logic to draw the bar chart with this `data`...
  // Remove the existing SVG if present
  d3.select("#bar-chart svg").remove();

    const svg = d3.select("#bar-chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    const x = d3.scaleBand()
        .domain(data.map(d => d.answer))
        .range([0, width])
        .padding(0.1);

    const maxCount = d3.max(data, d => d.count);

    const y = d3.scaleLinear()
        .domain([0, maxCount + (maxCount * 0.1)])
        .range([height, 0]);


    svg.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x))
      .selectAll("text")
      .style("text-anchor", "end")
      .attr("dx", "-.8em")
      .attr("dy", ".15em")
      .transition()
      .duration(1000)
      .attr("transform", "rotate(-45)");



    svg.append("text")
        .attr("transform", `translate(${width / 2}, ${height + margin.bottom - 10})`)
        .style("text-anchor", "middle")
        .text("Answers");

    svg.append("g")
        .call(d3.axisLeft(y));

    svg.append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 0 - margin.left + 20)
        .attr("x", 0 - (height / 2))
        .attr("dy", "1em")
        .style("text-anchor", "middle")
        .text("Number of Soldiers");

    const colorScale = d3.scaleSequential(d3.interpolateBlues)
        .domain([0, d3.max(data, d => d.count)]);

        
    const totalResponses = data.reduce((acc, currentItem) => acc + currentItem.count, 0);

    const bars = svg.selectAll("rect")
        .data(data)
        .enter()
        .append("rect")
        .attr("x", d => x(d.answer))
        .attr("y", height)
        .attr("width", x.bandwidth())
        .attr("height", 0)
        .attr("fill", d => colorScale(d.count))
        .on("mouseover", function(event, i) {
            d3.select(this).attr("fill", "darkblue");
            const d = data[i];
            const emailsList = d.emails && d.emails.length ? d.emails.join(', ') : 'No users';
            console.log("emailsList", (d.count));
            console.log("countList", (data[i].count));
            const percentage = ((d.count / totalResponses) * 100).toFixed(2);
            console.log("percentage", percentage);
            //const percentage = 
            tooltip
                .style("left", (d3.event.pageX + 10) + "px")
                .style("top", (d3.event.pageY +10) + "px")
                .html(`Answer: ${d.answer}<br>Total Soldiers: ${d.count}<br>Percentage from Total: ${percentage}%`)
                .style("display", "block");
        })
        .on("mouseout", function() {
            d3.select(this).attr("fill", d => colorScale(d.count));
            tooltip.style("display", "none");
        });

        bars.transition()
            .duration(800)
            .attr("y", d => y(d.count))
            .attr("height", d => height - y(d.count))
            .delay((d, i) => i * 50);


        }

        if (surveyID == 3) {
          question_data.shift();
        }

        const questionIdToPrompt = {};
        question_data.forEach(question => {
          questionIdToPrompt[question.question_id] = question.prompt;
        });

        const filteredRawData = raw_data.filter(d => d.survey_id === surveyID).map(entry => {
          if (surveyID == 3) {
            const {[Object.keys(entry.results)[0]]: _, ...rest} = entry.results;
            return {...entry, results: rest};
          }
          return entry;
        });

        if (surveyID === 2) {
            question_data.forEach((question, index) => {
            if (index < 5) {
                question.prompt = 'Motivation ' + question.prompt;
            } else if (index < 10) {
                question.prompt = 'Ability ' + question.prompt;
            } else if (index < 15) {
                question.prompt = 'Current ' + question.prompt;
            }
        });
    }

        filteredRawData.forEach(entry => {
          for (const questionId in entry.results) {
            const response = entry.results[questionId];
            const prompt = questionIdToPrompt[questionId];

            if (!allResponses[prompt]) {
              allResponses[prompt] = {};
            }
            allResponses[prompt][response] = (allResponses[prompt][response] || 0) + 1;
          }
        });

        const select = d3.select("#questionSelector")
          .on("change", function() {
            drawBarChart(questionIdToPrompt[this.value]);
          });

        select.selectAll("option")
          .data(question_data)
          .enter()
          .append("option")
          .attr("value", d => d.question_id)
          .text(d => d.prompt);

        if (question_data.length > 0) {
          const initialValue = question_data[0].question_id;
          select.property("value", initialValue);
          drawBarChart(questionIdToPrompt[initialValue]);
        }


        function updateQuestionSelector(questions) {
            const questionSelector = d3.select("#questionSelector");
            questionSelector.selectAll("option").remove(); // Clear previous options
            questions.forEach(question => {
              questionSelector
                .append("option")
                .attr("value", question.question_id)
                .text(question.prompt);
            });
        }

        function updateQuestionSelectorAndBarChart(selectedVersion) {
            let questionsToDisplay = question_data;
            if (parseInt(selectedVersion) !== latestVersionFromRawData) {
              const versionInfo = version_data.find(v => v.version.toString() === selectedVersion);
              if (versionInfo) {
                questionsToDisplay = Object.entries(versionInfo.questions).map(([id, prompt]) => ({
                  question_id: id,
                  prompt: prompt
                }));
              }
            }
            updateQuestionSelector(questionsToDisplay);
  
            if (questionsToDisplay.length > 0) {
              drawBarChart(questionsToDisplay[0].question_id, selectedVersion);
            }
        }


        const latestVersionFromRawData = Math.max(
            ...raw_data
            .filter(data => data.survey_id === surveyID)
            .map(data => data.version)
        );

        const relevantVersionData = version_data.filter(data => data.survey_id === surveyID);

        const versionSelector = d3.select("#versionSelector");

        versionSelector.selectAll("option").remove();

        if (![1, 2, 3].includes(surveyID)) {
          relevantVersionData.forEach(version => {
            versionSelector
              .append("option")
              .attr("value", version.version)
              .text(version.version === latestVersionFromRawData ? "Latest Version" : "Version " + version.version);
          });

        if (!relevantVersionData.some(v => v.version === latestVersionFromRawData)) {
          versionSelector
            .append("option")
            .attr("value", latestVersionFromRawData)
            .text("Latest Version");
        }

        versionSelector.property("value", latestVersionFromRawData);

        versionSelector.on("change", function() {
          updateQuestionSelectorAndBarChart(this.value);
        });

        updateQuestionSelectorAndBarChart(latestVersionFromRawData.toString());
        } else {
          versionSelector.style("display", "none");
        updateQuestionSelectorAndBarChart(latestVersionFromRawData.toString());
      }


        select.on("change", function() {
          const selectedVersion = versionSelector.style("display") !== "none" ? versionSelector.node().value : latestVersionFromRawData.toString();
          const selectedQuestionId = this.value;
          drawBarChart(selectedQuestionId, selectedVersion);
        });

//////////////////////////////////////////////////////////////////////////////////////////////
//end of the bar graph





//////////////////////////////////////////////////////////////////////////////////////////////
//Start of the line graph

      
      const parseDate = d3.timeParse("%Y-%m-%d");

      raw_data.forEach(d => {
        const dateString = d.timestamp.split("T")[0];
        const parsedDate = parseDate(dateString);
        if (parsedDate === null) {
          console.error("Failed to parse date:", dateString);
        }
      });


      const countByDate = d3.nest()
        .key(function(d) {
          return d.timestamp.split("T")[0];
        })
        .rollup(function(v) { return v.length; })
        .entries(raw_data)
        .map(function(group) {
          return {
            date: parseDate(group.key),
            count: group.value
          };
        });
      countByDate.sort((a, b) => a.date - b.date);
      console.log('count', countByDate);
      const validDataByDate = countByDate.filter(d => d.date);

      console.log('valid', validDataByDate);
      const marginLine = { top: 20, right: 840, bottom: 70, left: 35 };
      const widthLine = 2000 - marginLine.left - marginLine.right;
      const heightLine = 700 - marginLine.top - marginLine.bottom;

      const formatTime = d3.timeFormat("%B %d, %Y");

      const xLine = d3.scaleTime().range([0, widthLine]);
      const yLine = d3.scaleLinear().range([heightLine, 0]);

      const lineFunction = d3.line()
        .x(d => xLine(d.date))
        .y(d => yLine(d.count))
        .curve(d3.curveMonotoneX);

      const svgLine = d3.select("#line-chart").append("svg")
        .attr("width", widthLine + marginLine.left + marginLine.right)
        .attr("height", heightLine + marginLine.top + marginLine.bottom)
        .append("g")
        .attr("transform", "translate(" + marginLine.left + "," + marginLine.top + ")");

      svgLine.append("g").attr("class", "x axis").attr("transform", "translate(0," + heightLine + ")");
      svgLine.append("g").attr("class", "y axis");

      function drawAxes(data) {
        xLine.domain(d3.extent(data, d => d.date));
        yLine.domain([0, d3.max(data, d => d.count) * 1.1]);

        svgLine.select(".x.axis")
          .transition().duration(1000)
          .call(d3.axisBottom(xLine))
          .selectAll("text")
          .style("text-anchor", "end")
          .attr("dx", "-.8em")
          .attr("dy", ".15em")
          .transition().duration(1000)
          .attr("transform", "rotate(-45)");

        svgLine.select(".y.axis")
          .transition().duration(1000)
          .call(d3.axisLeft(yLine));
      }

      const linetooltip = d3.select("#line-chart").append("div")
        .attr("class", "linetooltip")
        .style("opacity", 0);

      function initializeLineGraph(data) {
        drawAxes(data);

        svgLine.append("path")
          .datum(data)
          .attr("class", "line")
          .attr("d", lineFunction)
          .attr("fill", "none")
          .attr("stroke", "steelblue")
          .attr("stroke-width", 1.5);

        const dots = svgLine.selectAll(".dot")
          .data(data)
          .enter()
          .append("circle")
          .attr("class", "dot")
          .attr("cx", d => xLine(d.date))
          .attr("cy", d => yLine(d.count))
          .attr("r", 3)
          .attr("fill", "steelblue")
          .on("mouseover", function(event, d) {
            linetooltip.transition()
              .duration(200)
              .style("opacity", .9);
            linetooltip.html("Date: " + formatTime(event.date) + "<br/>Count: " + event.count)
              .style("left", (event.pageX + 5) + "px")
              .style("top", (event.pageY + 28) + "px");
          })
          .on("mouseout", function(d) {
            linetooltip.transition()
              .duration(500)
              .style("opacity", 0);
          });
      }


      initializeLineGraph(validDataByDate);

      d3.select("#filter-btn").on("click", function() {
        const startDate = new Date(document.getElementById('start-date').value);
        const endDate = new Date(document.getElementById('end-date').value);

        const filteredData = validDataByDate.filter(d => d.date >= startDate && d.date <= endDate);
        updateChart(filteredData);
      });

      d3.select("#reset-btn").on("click", function() {
        updateChart(validDataByDate);
      });

      function updateChart(data) {
        drawAxes(data);
  

        const path = svgLine.select(".line").datum(data);
        path.transition().duration(1000).attr("d", lineFunction);

        const dots = svgLine.selectAll(".dot").data(data);
        dots.enter().append("circle").attr("class", "dot")
          .merge(dots)
          .transition().duration(1000)
          .attr("cx", d => xLine(d.date))
          .attr("cy", d => yLine(d.count))
          .attr("r", 3);

    
        svgLine.selectAll(".dot").remove();
      svgLine.selectAll(".dot")
        .data(data)
        .enter()
        .append("circle")
        .attr("class", "dot")
        .attr("cx", d => xLine(d.date))
        .attr("cy", d => yLine(d.count))
        .attr("r", 3)
        .attr("fill", "steelblue")
        .on("mousemove", function(event, d) {
          linetooltip.style("opacity", 0.9)
              .html("Date: " + formatTime(event.date) + "<br/>Count: " + event.count)
              .style("left", (event.pageX + 15) + "px")
              .style("top", (event.pageY - 15) + "px");
        })
        .on("mouseout", function() {
          linetooltip.style("opacity", 0);
        });


      }



  

      console.log('data by date', validDataByDate);


//////////////////////////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////////////////////////
//Start of table



const tableDiv = d3.select("#d3-table");

const table = tableDiv.append("table")
    .attr("class", "table table-bordered");
    $(function () {
    $('[data-toggle="tooltip"]').tooltip()
})

const getUserData = (userEmail) => {
    return user_data.find(user => user.email === userEmail);
};

const fixedColumns = ["Date", "Unit", "State", "Rank", "Email"];


let headerData;
function headTable() {
switch (surveyID) {
    case 1: 
        headerData = core_data[0] && core_data[0].h2f_results ? 
            ["Email"].concat(Object.keys(core_data[0].h2f_results), "h2f_flag") : 
            ["Email", "h2f_flag"];
        break;
    case 2: 
        headerData = core_data[0] && core_data[0].cpa_results ? 
            ["Email"].concat(Object.keys(core_data[0].cpa_results), "cpa_flag") : 
            ["Email", "cpa_flag"];
        break;
    case 3: 
        headerData = ["Email", "MS Grader", "fms_flag"];
        break;

    default:
        let questionHeaders = question_data.map(q => q.prompt);

        
        
        if (raw_data[0] && raw_data[0].results) {
            let questionKeys = Object.keys(raw_data[0].results);
            if (questionHeaders.length !== questionKeys.length) {
                console.error("Mismatch in question_data prompts and raw_data results!");
            }
            headerData = ["Email"].concat(questionHeaders);
        } else {
            headerData = ["Email"];
        }

}

headerData = ["Date", "Unit", "State", "Rank"].concat(headerData);



let questionColumns = headerData.filter(col => !fixedColumns.includes(col));



const thead = table.append("thead");



    thead.append("tr")
        .selectAll("th")
        .data(headerData)
        .enter()
        .append("th")
        .text(d => d)
        .attr("data-toggle", "tooltip")
        .attr("title", "Click to view responses");



}




function formatDate(isoString) {
    const date = new Date(isoString);
    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
}


const tbody = table.append("tbody");

function rowTable(selectedVersion, currentSurveyId) {
if ([1, 2, 3].includes(surveyID)) {
    core_data.forEach((entry, idx) => { 
        const row = tbody.append("tr");
    
        const userData = getUserData(entry.user_email || entry.email);
    
    
        const timestamp = raw_data[idx] ? formatDate(raw_data[idx].timestamp) : "N/A";

        row.append("td").text(timestamp);
        row.append("td").text(userData.unit);
        row.append("td").text(userData.state);
        row.append("td").text(userData.rank);
        row.append("td").text(entry.user_email || entry.email);
        
        const checkValue = (value) => (value === null) ? "N/A" : value;
        
        switch (surveyID) {
            case 1:
                if (entry.h2f_results) {
                    Object.values(entry.h2f_results).forEach(value => row.append("td").text(checkValue(value)));
                    row.append("td").text(checkValue(entry.h2f_flag));
                } else {
                    headerData.slice(5).forEach(() => row.append("td").text("N/A"));
                }
                break;

            case 2:
                if (entry.cpa_results) {
                    Object.values(entry.cpa_results).forEach(value => row.append("td").text(checkValue(value)));
                    row.append("td").text(checkValue(entry.cpa_flag));
                } else {
                    headerData.slice(5).forEach(() => row.append("td").text("N/A"));
                }
                break;

            case 3:
                if (raw_data[idx] && raw_data[idx].results) {
                    row.append("td").text(checkValue(raw_data[idx].results["1"]));
                } else {
                    row.append("td").text("N/A"); 
                }
                row.append("td").text(checkValue(entry.fms_flag));
                break;

        }
    });

  }else{
    
    const latestVersionNumber = selectedVersion === 'latest' ? getLatestVersionNumber(raw_data, currentSurveyId).toString() : null;
    let versionToUse = latestVersionNumber || selectedVersion;

    let versionInfo = version_data.find(v => v.version.toString() === versionToUse && v.survey_id === currentSurveyId);
    if (!versionInfo) {
      console.log(`Fallback to current question_data prompts for version: ${versionToUse}`);
      versionInfo = {
        questions: question_data.reduce((obj, item, index) => {
          obj[index + 1] = item.prompt;
          return obj;
        }, {})
      };
      if (selectedVersion === 'latest') {
        versionToUse = latestVersionNumber;
      }
    }


  
    const filteredData = raw_data.filter(entry => entry.version.toString() === versionToUse && entry.survey_id === currentSurveyId);

    const $tbody = $('table tbody').empty();

    filteredData.forEach(entry => {
      const $row = $('<tr></tr>');

      const userData = getUserData(entry.email);

      $row.append($("<td></td>").text(formatDate(entry.timestamp) || "N/A"));
      $row.append($("<td></td>").text(userData.unit || "N/A"));
      $row.append($("<td></td>").text(userData.state || "N/A"));
      $row.append($("<td></td>").text(userData.rank || "N/A"));
      $row.append($("<td></td>").text(entry.email || "N/A"));

      Object.entries(versionInfo.questions).forEach(([key, _]) => {
        let answer = entry.results[key];
        if (Array.isArray(answer)) {
          answer = answer.join(", ");
        }
        $row.append($("<td></td>").text(answer || "N/A"));
      });

      $tbody.append($row);
    });
  }

  }



function initializeDataTable() {
    if ($.fn.dataTable.isDataTable('.table')) {
        $('.table').DataTable().draw();
    } else {
      $('.table').DataTable({
    "autoWidth": false,
    });
    }
}

function getTableData(tableId) {
    const table = document.getElementById(tableId);
    const rows = Array.from(table.querySelectorAll("tbody tr"));
    const data = rows.map(row => {
        const cells = Array.from(row.querySelectorAll("td"));
        return cells.map(cell => cell.textContent);
    });
    return data;
}

function downloadCSV(csv, filename) {
    const csvFile = new Blob([csv], { type: "text/csv" });
    const downloadLink = document.createElement("a");
    downloadLink.download = filename;
    downloadLink.href = window.URL.createObjectURL(csvFile);
    downloadLink.style.display = "none";
    document.body.appendChild(downloadLink);
    downloadLink.click();
}


function convertToCSV(arr) {
    let csv = '';
    for (let i = 0; i < arr.length; i++) {
        let row = arr[i];
        let line = row.map(item => '"' + String(item).replace(/"/g, '""') + '"').join(',');
        csv += line + '\r\n';
    }
    return csv;
}

document.getElementById("export-btn").addEventListener("click", function() {
    const tableData = getTableData("d3-table");
    const headers = Array.from(document.querySelectorAll("#d3-table thead th")).map(th => th.textContent);
    tableData.unshift(headers);
    const csv = convertToCSV(tableData); 

    let filename = prompt("Please enter the filename:", "export.csv");
    if (filename === null) {
        return;
    } else if (filename.trim() === "") {
        filename = "export.csv";
    } else if (!filename.endsWith(".csv")) {
        filename += ".csv";
    }

    downloadCSV(csv, filename);
});




function populateVersionDropdown(currentSurveyId) {
  const $versionSelector = $("#version-selector");

  $versionSelector.find("option:not(:first)").remove();

  const relevantVersionNumbers = version_data
    .filter(v => v.survey_id === currentSurveyId)
    .map(v => v.version);

  relevantVersionNumbers
    .sort((a, b) => a - b)
    .forEach(versionNumber => {
      $("<option></option>")
        .val(versionNumber)
        .text("Version " + versionNumber)
        .appendTo($versionSelector);
    });
}



$("#version-selector").change(function() {
  const selectedVersion = $(this).val();
  updateHeaderData(selectedVersion, surveyID);
  rowTable(selectedVersion, surveyID);
});






function updateHeaderData(selectedVersion) {
  let questionColumns;
  if (selectedVersion === "latest") {
    selectedVersion = version_data[0].version;
  }

  const versionInfo = version_data.find(v => v.version.toString() === selectedVersion);

  if (versionInfo) {
    questionColumns = Object.values(versionInfo.questions);
  } else {
    let questionHeaders = question_data.map(q => q.prompt);
    questionColumns = questionHeaders;
  }

  headerData = fixedColumns.concat(questionColumns);

  renderTableHeaders();
  rowTable();
}


function renderTableHeaders() {
  const $thead = $("table thead");
  $thead.empty();
  const $tr = $("<tr></tr>");
  
  headerData.forEach(header => {
    $("<th></th>")
      .text(header)
      .attr("data-toggle", "tooltip")
      .attr("title", "Click to view responses")
      .appendTo($tr);
  });

  $thead.append($tr);
}

function getLatestVersionNumber(rawData) {
  return Math.max(...rawData.map(entry => entry.version));
}

$(document).ready(function() {
  const latestVersionNumber = getLatestVersionNumber(raw_data).toString();
    populateVersionDropdown(surveyID);
    headTable();
    rowTable(latestVersionNumber, surveyID);
    initializeDataTable();
});


</script>

</body>
</html>
